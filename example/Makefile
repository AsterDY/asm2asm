ARCH			:= neon
TMP_DIR			:= output
OUT_DIR			:= .
SRC_FILE		:= native/native.c

CPU_neon  		:= arm64
TMPL_neon		:=
CFLAGS_neon		:=

CC_arm64		:= clang
ASM2ASM_arm64	:= ../asm2arm.py

CFLAGS			:= -mno-red-zone
CFLAGS			+= -fPIC
CFLAGS			+= -fno-asynchronous-unwind-tables
CFLAGS			+= -fno-builtin
CFLAGS			+= -fno-exceptions
CFLAGS			+= -fno-rtti
CFLAGS			+= -fno-stack-protector
CFLAGS			+= -nostdlib
CFLAGS			+= -O3
CFLAGS			+= -Wall -Werror

NATIVE_SRC		:= $(wildcard native/*.h)
NATIVE_SRC		+= $(wildcard native/*.c)

.PHONY: all clean ${ARCH}

define build_tmpl
	$(eval @arch := $(1))
	$(eval @tmpl := $(2))
	$(eval @dest := $(3))

${@dest}: ${@tmpl}
	mkdir -p $(dir ${@dest})
	echo '// Code generated by Makefile, DO NOT EDIT.' > ${@dest}
	echo >> ${@dest}
	sed -e 's/{{PACKAGE}}/${@arch}/g' ${@tmpl} >> ${@dest}
endef

define build_arch
	$(eval @cpu		:= $(value CPU_$(1)))
	$(eval @deps	:= $(foreach tmpl,$(value TMPL_$(1)),${OUT_DIR}/$(1)/${tmpl}.go))
	$(eval @asmin	:= ${TMP_DIR}/$(1)/native.s)
	$(eval @asmout	:= ${OUT_DIR}/$(1)/native_${@cpu}.s)
	$(eval @stubin	:= ${OUT_DIR}/native_${@cpu}.tmpl)
	$(eval @stubout	:= ${OUT_DIR}/$(1)/native_${@cpu}.go)

$(1): ${@asmout} ${@deps}

${@asmout}: ${@stubout} ${NATIVE_SRC}
	mkdir -p ${TMP_DIR}/$(1)
	$${CC_${@cpu}} $${CFLAGS} $${CFLAGS_$(1)} -S -o ${TMP_DIR}/$(1)/native.s ${SRC_FILE}
	python3 $${ASM2ASM_${@cpu}} ${@asmout} ${TMP_DIR}/$(1)/native.s
	asmfmt -w ${@asmout}

$(eval $(call 	\
	build_tmpl,	\
	$(1),		\
	${@stubin},	\
	${@stubout}	\
))

$(foreach 							\
	tmpl,							\
	$(value TMPL_$(1)),				\
	$(eval $(call 					\
		build_tmpl,					\
		$(1),						\
		${OUT_DIR}/${tmpl}.tmpl,	\
		${OUT_DIR}/$(1)/${tmpl}.go	\
	))								\
)
endef

all: ${ARCH}

clean:
	$(foreach									\
		arch,									\
		${ARCH},								\
		rm -vfr ${TMP_DIR}/${arch}; 			\
		rm -vfr ${OUT_DIR}/${arch};				\
		rmdir --ignore-fail-on-non-empty output	\
	)

$(foreach 								\
	arch,								\
	${ARCH},							\
	$(eval $(call build_arch,${arch}))	\
)