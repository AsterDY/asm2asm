#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import typing

GOOS = {
    'aix',
    'android',
    'darwin',
    'dragonfly',
    'freebsd',
    'hurd',
    'illumos',
    'js',
    'linux',
    'nacl',
    'netbsd',
    'openbsd',
    'plan9',
    'solaris',
    'windows',
    'zos',
}

GOARCH = {
    '386',
    'amd64',
    'amd64p32',
    'arm',
    'armbe',
    'arm64',
    'arm64be',
    'ppc64',
    'ppc64le',
    'mips',
    'mipsle',
    'mips64',
    'mips64le',
    'mips64p32',
    'mips64p32le',
    'ppc',
    'riscv',
    'riscv64',
    's390',
    's390x',
    'sparc',
    'sparc64',
    'wasm',
}

class Subroutine(typing.NamedTuple):
    offset     : int
    stack_size : int

def save_subr_refs(name: str, pkg: str, base: str, subr: dict[str, Subroutine]):
    with open(name, 'w') as fp:
        print('// +build !noasm !appengine', file = fp)
        print('// Code generated by asm2asm, DO NOT EDIT.', file = fp)
        print(file = fp)
        print('package %s' % pkg, file = fp)
        print(file = fp)

        # the function stub
        print('//go:nosplit', file = fp)
        print('//go:noescape', file = fp)
        print('//goland:noinspection ALL', file = fp)
        print('func %s() uintptr' % base, file = fp)

        # only save the actual function addresses if any
        if not subr:
            return

        # subroutine reference addresses
        print(file = fp)
        print('var (', file = fp)

        # sort the subroutines by name
        mlen = max(len(s) for s in subr)
        data = sorted(subr.items())

        # dump every function
        for name, item in data:
            print('    _subr_%s = %s() + %d' % (name.ljust(mlen, ' '), base, item.offset), file = fp)

        # dump the stack usages
        print(')', file = fp)
        print(file = fp)
        print('const (', file = fp)

        # dump every constant
        for name, item in data:
            print('    _stack_%s = %d' % (name, item.stack_size), file = fp)

        # assign subroutine offsets to '_' to mute the "unused" warnings
        print(')', file = fp)
        print(file = fp)
        print('var (', file = fp)

        # dump every function
        for name, _ in data:
            print('    _ = _subr_%s' % name, file = fp)

        # assign stack usages to '_' to mute the "unused" warnings
        print(')', file = fp)
        print(file = fp)
        print('const (', file = fp)

        # dump every constant
        for name, _ in data:
            print('    _ = _stack_%s' % name, file = fp)
        else:
            print(')', file = fp)

def make_subr_filename(name: str) -> str:
    name = os.path.basename(name)
    base = os.path.splitext(name)[0].rsplit('_', 2)

    # construct the new name
    if base[-1] in GOOS:
        return '%s_subr_%s.go' % ('_'.join(base[:-1]), base[-1])
    elif base[-1] not in GOARCH:
        return '%s_subr.go' % '_'.join(base)
    elif len(base) > 2 and base[-2] in GOOS:
        return '%s_subr_%s_%s.go' % ('_'.join(base[:-2]), base[-2], base[-1])
    else:
        return '%s_subr_%s.go' % ('_'.join(base[:-1]), base[-1])
